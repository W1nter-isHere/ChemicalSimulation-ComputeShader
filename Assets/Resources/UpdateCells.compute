// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

RWTexture2D<float4> result;
Texture2D last_update;

float cell_width;
float cell_height;

float screen_width;
float screen_height;

bool within_bounds_y(const uint y)
{
    return y > 0 && y < screen_height;
}

bool within_bounds_x(const uint x)
{
    return x > 0 && x < screen_width;
}

bool within_bounds(uint2 pos)
{
    return within_bounds_x(pos.x) && within_bounds_y(pos.y);
}

uint2 try_move(uint2 origin, uint2 direction, uint magnitude)
{
    if (magnitude == 0)
    {
        return origin;
    }

    if (direction.x == 0 || direction.y == 0)
    {
        return origin;
    }

    for (uint i = magnitude; i > 0; i--)
    {
        // todo: does this work?
        const uint2 new_position = origin + uint2(direction.x * magnitude, direction.y * magnitude);
        
        if (direction.x == 0)
        {
            if (!within_bounds_y(new_position.y)) continue;
        } else if (direction.y == 0)
        {
            if (!within_bounds_x(new_position.x)) continue;
        } else
        {
            if (!within_bounds(new_position)) continue;
        }
        
        float4 color_at_position = last_update[new_position];
        
        if (color_at_position.a <= 0)
        {
            return new_position;
        }
    }

    return origin;
}

bool try_move_simple(const uint2 origin, uint2 direction, const float4 color)
{
    uint2 new_position = origin + direction;
    
    if (direction.x == 0)
    {
        if (!within_bounds_y(new_position.y)) return false;
    } else if (direction.y == 0)
    {
        if (!within_bounds_x(new_position.x)) return false;
    } else
    {
        if (!within_bounds(new_position)) return false;
    }

    float4 color_at_position = last_update[new_position];
        
    if (color_at_position.a <= 0)
    {
        result[new_position] = color;
        return true;
    }

    return false;
}

[numthreads(8, 8, 1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
    const uint2 current_pos = id.xy;
    float4 current_color = last_update[current_pos];
    if (current_color.a <= 0) return;

    if (try_move_simple(current_pos, uint2(0, -1), current_color)) return;
    if (try_move_simple(current_pos, uint2(-1, -1), current_color)) return;
    if (try_move_simple(current_pos, uint2(1, -1), current_color)) return;
    result[current_pos] = current_color;
}