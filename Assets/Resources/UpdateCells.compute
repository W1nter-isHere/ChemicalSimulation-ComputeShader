// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

RWTexture2D<float4> result;
Texture2D last_update;

RWTexture2D<float4> material_map;
Texture2D last_material_map;

float cell_width;
float cell_height;

float screen_width;
float screen_height;



struct random_result
{
    uint4 state;
    float value;
};
uint taus_step(const uint z, const int s1, const int s2, const int s3, const uint m)
{
    uint b = (((z << s1) ^ z) >> s2);
    return ((z & m) << s3) ^ b;
}
uint lcg_step(const uint z, const uint a, const uint c)
{
    return a * z + c;
}
random_result hybrid_taus(uint4 state)
{
    state.x = taus_step(state.x, 13, 19, 12, 4294967294);
    state.y = taus_step(state.y, 2, 25, 4, 4294967288);
    state.z = taus_step(state.z, 3, 11, 17, 4294967280);
    state.w = lcg_step(state.w, 1664525, 1013904223);

    random_result rand;
    rand.state = state;
    rand.value = 2.3283064365387e-10 * (state.x ^ state.y ^ state.z ^ state.w);

    return rand;
}
float rand(uint3 id)
{
    uint4 rs = uint4(124124, 545612, 435346, 675234);
    rs.x += id.x;
    rs.y += id.y;
    rs.z += (uint)(sin(id.x * 71.01) * 500461564);
    rs.w += (uint)(cos(id.y * 53.7) * 1023467329);
    return hybrid_taus(rs).value;
}
float rand_in_range(const uint3 id, const float minimum, const float maximum)
{
    return (int) (rand(id) * (maximum - minimum) + minimum);
}

void set_cell(const uint2 position, const float4 color, const float4 material)
{
    result[position] = color;
    material_map[position] = material;
}
bool within_bounds(int2 pos)
{
    return pos.x >= 0 && pos.x < screen_width && pos.y >= 0 && pos.y < screen_height;
}
bool can_move(const uint2 origin, int2 direction, const float4 color, const float4 material, const bool commit_result = false)
{
    int2 new_position = int2((int)origin.x + direction.x, (int)origin.y + direction.y);
    if (!within_bounds(new_position)) return false;
    
    float4 color_at_position = last_update[new_position];
        
    if (color_at_position.a <= 0)
    {
        if (commit_result)
        {
            set_cell(new_position, color, material);
        }
        return true;
    }

    return false;
}
bool is_static(float4 material)
{
    return material.a == 0.25;
}
bool is_falling(float4 material)
{
    return material.a == 0.50;
}
bool is_liquid(float4 material)
{
    return material.a == 0.75;
}
bool is_gas(float4 material)
{
    return material.a == 1.00;
}
uint2 evaluate_simple(uint2 position, const float4 color, const float4 material)
{
    if (is_static(material)) return position;
    if (is_falling(material))
    {
        if (can_move(position, int2(0, -1), color, material)) return position + int2(0, -1);
        if (can_move(position, int2(-1, -1), color, material)) return position + int2(-1, -1);
        if (can_move(position, int2(1, -1), color, material)) return position + int2(1, -1);
    } else if (is_liquid(material))
    {
        if (can_move(position, int2(0, -1), color, material)) return position + int2(0, -1);
        if (can_move(position, int2(-1, -1), color, material)) return position + int2(-1, -1);
        if (can_move(position, int2(1, -1), color, material)) return position + int2(1, -1);
        if (can_move(position, int2(1, 0), color, material)) return position + int2(1, 0);
        if (can_move(position, int2(-1, 0), color, material)) return position + int2(-1, 0);
    } else if (is_gas(material))
    {
        if (can_move(position, int2(0, 1), color, material)) return position + int2(0, 1);
        if (can_move(position, int2(-1, 1), color, material)) return position + int2(-1, 1);
        if (can_move(position, int2(1, 1), color, material)) return position + int2(1, 1);
    }

    return position;
}
bool can_move_checking_contenders(uint2 position, const int2 direction, const float4 color, float4 material, bool commit_result)
{
    int contender_wins = 0;
    int2 target_pos = position + direction;
        
    if (can_move(position, direction, color, material))
    {
        contender_wins = -1;
        
        for (int i = -1; i <= 1; i++)
        {
            for (int j = -1; j <= 1; j++)
            {
                // skip target position
                if (i == 0 && j == 0) continue;
                int2 contender = int2(target_pos.x + i, target_pos.y + j);
                // skip current cell position
                if (contender.x == position.x && contender.y == position.y) continue;

                // is contender real
                if (!within_bounds(contender)) continue;
                float4 contender_color = last_update[contender];
                if (contender_color.a <= 0) continue;

                const float4 contender_material = last_material_map[contender];
                const uint2 contender_target_position = evaluate_simple(contender, contender_color, contender_material);

                // if contender will try to go here as well
                if (contender_target_position.x == target_pos.x && contender_target_position.y == target_pos.y)
                {
                    // if contender is greater, it will win.
                    if (contender_material.b > material.b) contender_wins++;
                }
            }
        }
    }

    bool win = contender_wins == -1;
    
    if (commit_result && win)
    {
        set_cell(target_pos, color, material);
    }

    return win;
}

[numthreads(8,8,1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
    const uint2 current_pos = id.xy;
    const float4 material = last_material_map[current_pos];
    float4 color = last_update[current_pos];
    
    if (color.a <= 0) return;
    if (is_static(material)) return;
    
    if (is_falling(material))
    {
        if (can_move_checking_contenders(current_pos, int2(0, -1), color, material, true)) return;
        if (can_move_checking_contenders(current_pos, int2(-1, -1), color, material, true)) return;
        if (can_move_checking_contenders(current_pos, int2(1, -1), color, material, true)) return;
    } else if (is_liquid(material))
    {
        if (can_move_checking_contenders(current_pos, int2(0, -1), color, material, true)) return;
        if (can_move_checking_contenders(current_pos, int2(-1, -1), color, material, true)) return;
        if (can_move_checking_contenders(current_pos, int2(1, -1), color, material, true)) return;
        if (can_move_checking_contenders(current_pos, int2(-1, 0), color, material, true)) return;
        if (can_move_checking_contenders(current_pos, int2(1, 0), color, material, true)) return;
    } else if (is_gas(material))
    {
        if (can_move_checking_contenders(current_pos, int2(0, 1), color, material, true)) return;
        if (can_move_checking_contenders(current_pos, int2(-1, 1), color, material, true)) return;
        if (can_move_checking_contenders(current_pos, int2(1, 1), color, material, true)) return;
    }

    set_cell(current_pos, color, material);
}